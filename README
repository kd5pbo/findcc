findcc
------

findcc searches for sequences of a set number of ascii digits (controllable
by -n) that either passes validation with the Luhn algorithm or has a final
digit that is equal to the modulus 10 sum of the other digits (with -mod10).
If no filename is given, the standard input is used.  The offset in the file
and line number where the number was found, as well as the number with its
check digit are printed in a tabular format, separated by whitespace.

Usage findcc [-q] [-n] [-mod10] [filename]

Options:
  -mod10=false: Use a simple sum modulus 10 instead of the Luhn algorithm.
  -n=15: Length of number to find, not including the check digit.
  -q=false: Be quiet; don't print the header.

Test Data
---------

The file testdata contains test data.  It is mostly random bytes, interspersed
with known good (and somewhat contrived) 16 digit numbers.  The output is
intended to be:

(Luhn algorithm)
OFFSET  LINE  NUMBER
  4144    25  1234567890123452
  5184    27  1122334455667786
  6224    29  9876543219876548
  6225    29  8765432198765482

(Simple sum mod 10)
OFFSET  LINE  NUMBER
  1023     5  1234567890123450
  2063    10  1122334455667784
  3103    18  9876543219876544
  3104    18  8765432198765449

Perl Hack
-----------

The following is a perl hack to calculate the sum mod 10 checksum of a 15-digit
number.  It is useful in verifying the output of findcc when -mod10 is used.

perl -E 'say+length(join("",map{"x"x$_}split//,$ARGV[0]))%10if$ARGV[0]=~/\d{15}/' 876543219876544

The output should be 9.
